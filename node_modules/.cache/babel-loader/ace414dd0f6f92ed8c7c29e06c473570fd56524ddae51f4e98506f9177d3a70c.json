{"ast":null,"code":"var _jsxFileName = \"E:\\\\FileConverter\\\\frontend\\\\src\\\\pages\\\\CompressImage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ImageCompress() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [quality, setQuality] = useState(70);\n  const [downloadUrl, setDownloadUrl] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const handleCompress = async () => {\n    if (!file) return alert(\"Select an image\");\n    setIsLoading(true);\n    const form = new FormData();\n    form.append(\"file\", file);\n    form.append(\"quality\", quality);\n    try {\n      const res = await fetch(\"http://localhost:5000/image-compress\", {\n        method: \"POST\",\n        body: form\n      });\n      const data = await res.json();\n      setDownloadUrl(\"http://localhost:5000\" + data.download_url);\n    } catch (e) {\n      console.error(e);\n      alert(\"Compression failed\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen pt-24 px-6\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-3xl mx-auto bg-white rounded-2xl shadow-lg p-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl font-bold text-blue-700 mb-4\",\n        children: \"Image Compress\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: e => setFile(e.target.files[0])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: quality,\n        onChange: e => setQuality(e.target.value),\n        className: \"border p-2 rounded my-2\",\n        placeholder: \"Quality (1-100)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCompress,\n        className: \"bg-blue-600 text-white px-6 py-2 rounded mt-4\",\n        disabled: isLoading,\n        children: isLoading ? \"Compressing...\" : \"Compress\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), downloadUrl && /*#__PURE__*/_jsxDEV(\"a\", {\n        href: downloadUrl,\n        download: true,\n        className: \"block mt-4 bg-green-600 text-white px-6 py-2 rounded text-center\",\n        children: \"Download Compressed Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_s(ImageCompress, \"pazwRYEaM7rnHYcmoCkMi7j1JPY=\");\n_c = ImageCompress;\nvar _c;\n$RefreshReg$(_c, \"ImageCompress\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ImageCompress","_s","file","setFile","quality","setQuality","downloadUrl","setDownloadUrl","isLoading","setIsLoading","handleCompress","alert","form","FormData","append","res","fetch","method","body","data","json","download_url","e","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","target","files","value","placeholder","onClick","disabled","href","download","_c","$RefreshReg$"],"sources":["E:/FileConverter/frontend/src/pages/CompressImage.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function ImageCompress() {\r\n  const [file, setFile] = useState(null);\r\n  const [quality, setQuality] = useState(70);\r\n  const [downloadUrl, setDownloadUrl] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const handleCompress = async () => {\r\n    if (!file) return alert(\"Select an image\");\r\n    setIsLoading(true);\r\n    const form = new FormData();\r\n    form.append(\"file\", file);\r\n    form.append(\"quality\", quality);\r\n\r\n    try {\r\n      const res = await fetch(\"http://localhost:5000/image-compress\", {\r\n        method: \"POST\",\r\n        body: form\r\n      });\r\n      const data = await res.json();\r\n      setDownloadUrl(\"http://localhost:5000\" + data.download_url);\r\n    } catch (e) {\r\n      console.error(e);\r\n      alert(\"Compression failed\");\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen pt-24 px-6\">\r\n      <div className=\"max-w-3xl mx-auto bg-white rounded-2xl shadow-lg p-8\">\r\n        <h1 className=\"text-3xl font-bold text-blue-700 mb-4\">Image Compress</h1>\r\n\r\n        <input type=\"file\" accept=\"image/*\" onChange={(e)=>setFile(e.target.files[0])}/>\r\n        <input type=\"number\" value={quality} onChange={(e)=>setQuality(e.target.value)}\r\n          className=\"border p-2 rounded my-2\" placeholder=\"Quality (1-100)\" />\r\n\r\n        <button onClick={handleCompress}\r\n          className=\"bg-blue-600 text-white px-6 py-2 rounded mt-4\"\r\n          disabled={isLoading}\r\n        >\r\n          {isLoading ? \"Compressing...\" : \"Compress\"}\r\n        </button>\r\n\r\n        {downloadUrl && (\r\n          <a href={downloadUrl} download\r\n            className=\"block mt-4 bg-green-600 text-white px-6 py-2 rounded text-center\">\r\n            Download Compressed Image\r\n          </a>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}