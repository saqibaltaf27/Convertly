{"ast":null,"code":"var _jsxFileName = \"E:\\\\FileConverter\\\\frontend\\\\src\\\\pages\\\\ExcelToWord.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ExcelToWord() {\n  _s();\n  const [files, setFiles] = useState([]);\n  const [progress, setProgress] = useState({});\n  const [results, setResults] = useState({});\n  const handleConvert = async () => {\n    if (!files.length) return alert(\"Select Excel files first\");\n    const newProgress = {};\n    const newResults = {};\n    setProgress({});\n    setResults({});\n    for (const file of files) {\n      newProgress[file.name] = 0;\n      setProgress({\n        ...newProgress\n      });\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      try {\n        const res = await fetch(\"http://localhost:5000/excel-to-word\", {\n          method: \"POST\",\n          body: formData\n        });\n        if (!res.ok) throw new Error(\"Conversion failed\");\n        const data = await res.json();\n        newProgress[file.name] = 100;\n        newResults[file.name] = \"http://localhost:5000\" + data.download_url;\n        setProgress({\n          ...newProgress\n        });\n        setResults({\n          ...newResults\n        });\n      } catch (err) {\n        console.error(err);\n        alert(`Conversion failed for ${file.name}`);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gradient-to-b from-blue-50 to-white pt-24 px-6\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-3xl mx-auto text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-4xl font-bold text-blue-700 mb-4\",\n        children: \"Excel to Word (Multiple)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600 mb-10\",\n        children: \"Upload multiple Excel sheets and convert them to Word format.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-8 rounded-2xl shadow-lg\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".xls,.xlsx\",\n          multiple: true,\n          onChange: e => {\n            setFiles(Array.from(e.target.files));\n            setProgress({});\n            setResults({});\n          },\n          className: \"block mx-auto mb-6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), files.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleConvert,\n          className: \"px-6 py-3 bg-blue-600 text-white rounded-xl hover:bg-blue-700\",\n          children: \"Convert All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-6 space-y-4\",\n          children: files.map(file => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"border rounded-xl p-4 text-left bg-gray-50\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex justify-between items-center mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"font-medium\",\n                children: file.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 19\n              }, this), results[file.name] && /*#__PURE__*/_jsxDEV(\"a\", {\n                href: results[file.name],\n                download: true,\n                className: \"px-3 py-1 bg-green-600 text-white text-sm rounded-lg hover:bg-green-700\",\n                children: \"Download\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-full bg-gray-200 rounded-full h-2\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"bg-blue-600 h-2 rounded-full transition-all duration-500\",\n                style: {\n                  width: `${progress[file.name] || 0}%`\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 17\n            }, this)]\n          }, file.name, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(ExcelToWord, \"ptn9YtLGe+WHmD7qVrMD7/gma3A=\");\n_c = ExcelToWord;\nvar _c;\n$RefreshReg$(_c, \"ExcelToWord\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ExcelToWord","_s","files","setFiles","progress","setProgress","results","setResults","handleConvert","length","alert","newProgress","newResults","file","name","formData","FormData","append","res","fetch","method","body","ok","Error","data","json","download_url","err","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","multiple","onChange","e","Array","from","target","onClick","map","href","download","style","width","_c","$RefreshReg$"],"sources":["E:/FileConverter/frontend/src/pages/ExcelToWord.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function ExcelToWord() {\r\n  const [files, setFiles] = useState([]);\r\n  const [progress, setProgress] = useState({});\r\n  const [results, setResults] = useState({});\r\n\r\n  const handleConvert = async () => {\r\n    if (!files.length) return alert(\"Select Excel files first\");\r\n\r\n    const newProgress = {};\r\n    const newResults = {};\r\n    setProgress({});\r\n    setResults({});\r\n\r\n    for (const file of files) {\r\n      newProgress[file.name] = 0;\r\n      setProgress({ ...newProgress });\r\n\r\n      const formData = new FormData();\r\n      formData.append(\"file\", file);\r\n\r\n      try {\r\n        const res = await fetch(\"http://localhost:5000/excel-to-word\", {\r\n          method: \"POST\",\r\n          body: formData,\r\n        });\r\n\r\n        if (!res.ok) throw new Error(\"Conversion failed\");\r\n\r\n        const data = await res.json();\r\n        newProgress[file.name] = 100;\r\n        newResults[file.name] = \"http://localhost:5000\" + data.download_url;\r\n\r\n        setProgress({ ...newProgress });\r\n        setResults({ ...newResults });\r\n      } catch (err) {\r\n        console.error(err);\r\n        alert(`Conversion failed for ${file.name}`);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-b from-blue-50 to-white pt-24 px-6\">\r\n      <div className=\"max-w-3xl mx-auto text-center\">\r\n        <h1 className=\"text-4xl font-bold text-blue-700 mb-4\">\r\n          Excel to Word (Multiple)\r\n        </h1>\r\n        <p className=\"text-gray-600 mb-10\">\r\n          Upload multiple Excel sheets and convert them to Word format.\r\n        </p>\r\n\r\n        <div className=\"bg-white p-8 rounded-2xl shadow-lg\">\r\n          <input\r\n            type=\"file\"\r\n            accept=\".xls,.xlsx\"\r\n            multiple\r\n            onChange={(e) => {\r\n              setFiles(Array.from(e.target.files));\r\n              setProgress({});\r\n              setResults({});\r\n            }}\r\n            className=\"block mx-auto mb-6\"\r\n          />\r\n\r\n          {files.length > 0 && (\r\n            <button\r\n              onClick={handleConvert}\r\n              className=\"px-6 py-3 bg-blue-600 text-white rounded-xl hover:bg-blue-700\"\r\n            >\r\n              Convert All\r\n            </button>\r\n          )}\r\n\r\n          <div className=\"mt-6 space-y-4\">\r\n            {files.map((file) => (\r\n              <div\r\n                key={file.name}\r\n                className=\"border rounded-xl p-4 text-left bg-gray-50\"\r\n              >\r\n                <div className=\"flex justify-between items-center mb-2\">\r\n                  <span className=\"font-medium\">{file.name}</span>\r\n                  {results[file.name] && (\r\n                    <a\r\n                      href={results[file.name]}\r\n                      download\r\n                      className=\"px-3 py-1 bg-green-600 text-white text-sm rounded-lg hover:bg-green-700\"\r\n                    >\r\n                      Download\r\n                    </a>\r\n                  )}\r\n                </div>\r\n                <div className=\"w-full bg-gray-200 rounded-full h-2\">\r\n                  <div\r\n                    className=\"bg-blue-600 h-2 rounded-full transition-all duration-500\"\r\n                    style={{\r\n                      width: `${progress[file.name] || 0}%`,\r\n                    }}\r\n                  ></div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}